# -*- coding: utf-8 -*-
"""whisky.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m9Sq0X1c4Z8Lvk_jiTVmtNo7o4AW_qkc
"""

import numpy as np
import pandas as pd
from tensorflow import keras
from keras.layers import Dense
from keras.models import Sequential
from keras.callbacks import EarlyStopping, ModelCheckpoint
from sklearn.model_selection import train_test_split

from sklearn.preprocessing import MinMaxScaler

# 데이터 세트를 읽어들인다.
df = pd.read_csv("/content/whisky.csv", sep=',')

# 결측치 제거
df = df.dropna(subset=['Honey'])

# 정수형 변환
df['Honey'] = df['Honey'].astype(int)

df_encoded = pd.get_dummies(df, columns=['Distillery'], drop_first=True)

# 입력 데이터 X : 'Honey' 컬럼 제외한 모든 컬럼 사용
X = df_encoded.drop(columns=['Honey'])

y = df_encoded['Honey']

y=keras.utils.to_categorical(y)

print()

mms=MinMaxScaler()
mms.fit(X)
print(X.head())
X_mms=mms.transform(X)
X = pd.DataFrame(X_mms, columns=X.columns, index=list(X.index.values))


print(X.head())
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,shuffle=True)
print(df.Honey)


# 케라스 모델을 생성한다.
input_dim = X.shape[1]
model = keras.models.Sequential()
model.add(keras.layers.Dense(64, activation='tanh', input_shape=(input_dim,)))
model.add(keras.layers.Dense(64, activation='tanh'))
model.add(keras.layers.Dense(64, activation='tanh'))
model.add(keras.layers.Dense(32, activation='tanh'))
model.add(keras.layers.Dense(5,activation='softmax'))

# 케라스 모델을 컴파일한다.
model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])


# 20회 이상 결과가 향상되지 않으면 자동으로 중단되게끔 합니다.
early_stopping_callback = EarlyStopping(monitor='val_loss', patience=20)

# 모델의 이름을 정합니다.
modelpath='/content/whisky_modelr.keras'

# 최적화 모델을 업데이트하고 저장합니다.
checkpointer = ModelCheckpoint(filepath=modelpath, monitor='val_loss', verbose=1, save_best_only=True)

# 실행 관련 설정을 하는 부분입니다. 전체의 20%를 검증셋으로 설정합니다.
history = model.fit(X_train, y_train, validation_split=0.25, epochs=2000, batch_size=16, callbacks=[early_stopping_callback, checkpointer])

# 테스트 결과를 출력합니다.
score=model.evaluate(X_test, y_test)
print('Test accuracy:', score[1])